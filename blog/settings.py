"""
Django settings for blog project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-th$_2-hj$_*55jgej)d-ti(17(0w@9idn&5vz0@(bd^r$lqe#j'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'article',
    "user",
    'crispy_forms',
    'ckeditor',
    'django_cleanup',#https://pypi.org/project/django-cleanup/ adresinde anlatıldığı gibi makale silinince silinecek resim dosyaları otomatik silmesi için pip install django-cleanup komutuyla cleanup indirdik buraya da ekledik şimdi djangoya tanıtalım şimdi article içindeki models.py ye gidelim.
    
]
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
]
ROOT_URLCONF = 'blog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ["templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
            ],
        },
    },
]

WSGI_APPLICATION = 'blog.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'tr'

TIME_ZONE = 'Europe/Istanbul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/
STATIC_URL = 'static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static-files')]
STATIC_ROOT=os.path.join(BASE_DIR,"static-root")#terminalde "python manage.py collectstatic" komutunu çalıştır tüm dosyaların staticfiles altında toplandı.servera atınca kolaylıkla çalışacaktır
# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'


#python manage.py shell komutuyla cmd ekranına girip Article.objects.create(title="Hatice Hanım",content="195",author=newUser2) komutuyla article oluşturup kaydedebiliriz Article.objects.all() ile tüm article ler alınır
CRISPY_TEMPLATE_PACK = 'bootstrap4'

#https://github.com/django-ckeditor/django-ckeditor#usage sayfasındaki bu kodla ckeditörü config edelimki sıkıntı çıkmasın
CKEDITOR_CONFIGS = {
    "default": {
        "removePlugins": "stylesheetparser",
        "allowedContent":True,
        "width":"100%",
    }
}
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
"""""

https://simpleisbetterthancomplex.com/tutorial/2016/08/01/how-to-upload-files-with-django.html adresindeki dökümandan dosya yükleme ayarlarını yapmalıyız

Django ile Dosya Yüklemenin Temelleri
Dosyalar sunucuya gönderildiğinde, dosya verileri request.FILES.

enctype="multipart/form-data"HTML formunun özniteliğin doğru ayarlanmış olması zorunludur . Aksi takdirde, request.FILESboş olacaktır.

Form, POST yöntemi kullanılarak gönderilmelidir.

Django, yüklenen dosyaları işlemek için uygun model alanlarına sahiptir: FileFieldve ImageField.Resim dosyalarını kullanabilmek için pip install Pillow komutunu çalıştırmalıyız 

Yüklenen FileFieldveya ImageFieldveritabanında değil dosya sisteminde depolanan dosyalar.

FileFieldve ImageFieldveritabanında (genellikle VARCHAR) gerçek dosyaya referansı içeren bir dize alanı olarak oluşturulur.

FileFieldveya içeren bir model örneğini silerseniz ImageField, Django fiziksel dosyayı silmez , yalnızca dosyaya yapılan başvuruyu siler.

the request.FILESsözlük benzeri bir nesnedir. Girilen her anahtar request.FILES, <input type="file" name="" />.

İçindeki her değer request.FILESbir UploadedFileörnektir.

Projenizin settings.pyMEDIA_URL içinde ve ayarlamanız gerekecek .MEDIA_ROOT

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
Geliştirme sunucusunda, Django.contrib.staticfiles.views.serve() görünümünü kullanarak kullanıcı tarafından yüklenen dosyaları (medya) sunabilirsiniz .

from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    # Project url patterns...
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
Şablona erişmek için yapılandırmanızın içine MEDIA_URLeklemeniz gerekir django.template.context_processors.media. context_processeorsTEMPLATES

Basit Dosya Yükleme
Aşağıdaki, kullanarak minimal bir dosya yükleme örneğidir FileSystemStorage. Sadece sürecin akışı hakkında bilgi edinmek için kullanın.

basit_upload.html

{% extends 'base.html' %}

{% load static %}

{% block content %}
  <form method="post" enctype="multipart/form-data">
    {% csrf_token %}
    <input type="file" name="myfile">
    <button type="submit">Upload</button>
  </form>

  {% if uploaded_file_url %}
    <p>File uploaded at: <a href="{{ uploaded_file_url }}">{{ uploaded_file_url }}</a></p>
  {% endif %}

  <p><a href="{% url 'home' %}">Return to home</a></p>
{% endblock %}
görünümler.py

from django.shortcuts import render
from django.conf import settings
from django.core.files.storage import FileSystemStorage

def simple_upload(request):
    if request.method == 'POST' and request.FILES['myfile']:
        myfile = request.FILES['myfile']
        fs = FileSystemStorage()
        filename = fs.save(myfile.name, myfile)
        uploaded_file_url = fs.url(filename)
        return render(request, 'core/simple_upload.html', {
            'uploaded_file_url': uploaded_file_url
        })
    return render(request, 'core/simple_upload.html')
Model Formları ile Dosya Yükleme
Şimdi, bu daha uygun bir yol. Model formları doğrulamayı gerçekleştirir, yükleme için mutlak yolu otomatik olarak oluşturur, dosya adı çakışmalarını ve diğer yaygın görevleri ele alır.

modeller.py

from django.db import models

class Document(models.Model):
    description = models.CharField(max_length=255, blank=True)
    document = models.FileField(upload_to='documents/')
    uploaded_at = models.DateTimeField(auto_now_add=True)
formlar.py

from django import forms
from uploads.core.models import Document

class DocumentForm(forms.ModelForm):
    class Meta:
        model = Document
        fields = ('description', 'document', )
görünümler.py

def model_form_upload(request):
    if request.method == 'POST':
        form = DocumentForm(request.POST, request.FILES)
        if form.is_valid():
            form.save()
            return redirect('home')
    else:
        form = DocumentForm()
    return render(request, 'core/model_form_upload.html', {
        'form': form
    })
model_form_upload.html

{% extends 'base.html' %}

{% block content %}
  <form method="post" enctype="multipart/form-data">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Upload</button>
  </form>

  <p><a href="{% url 'home' %}">Return to home</a></p>
{% endblock %}
FileField upload_to Parametresi Hakkında
Aşağıdaki örneğe bakın:

document = models.FileField(upload_to='documents/')
upload_toParametreyi not edin . Dosyalar otomatik olarak adresine yüklenecektir MEDIA_ROOT/documents/.

Ayrıca şöyle bir şey yapmak da mümkündür:

document = models.FileField(upload_to='documents/%Y/%m/%d/')
Bugün yüklenen bir dosya MEDIA_ROOT/documents/2016/08/01/.

Ayrıca upload_to, bir dize döndüren bir çağrılabilir olabilir. Bu çağrılabilir örnek ve dosya adı olmak üzere iki parametreyi kabul eder .

def user_directory_path(instance, filename):
    # file will be uploaded to MEDIA_ROOT/user_<id>/<filename>
    return 'user_{0}/{1}'.format(instance.user.id, filename)

class MyModel(models.Model):
    upload = models.FileField(upload_to=user_directory_path)
Örnekleri İndirin
Bu gönderide kullanılan kod Github'da mevcuttur .

git clone https://github.com/sibtc/simple-file-upload.git
pip install django
python manage.py migrate
python manage.py runserver


"""
